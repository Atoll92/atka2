{"version":3,"sources":["Effects.js","index.js"],"names":["Effects","composer","useRef","useThree","scene","gl","size","camera","params","useMemo","focus","aperture","maxblur","useEffect","current","setSize","width","height","useFrame","render","ref","args","attachArray","FXAAShader","material-uniforms-resolution-value","renderToScreen","extend","EffectComposer","ShaderPass","RenderPass","SSAOPass","UnrealBloomPass","BokehPass","Model","props","useState","obj","set","OBJLoader","load","url","mat","THREE","color","opacity","transparent","depthTest","traverse","child","Mesh","material","object","position","rotation","FullModel","time","setTime","useMousePosition","state","clock","getElapsedTime","modelPosition","modelRotation","x","y","PHI","s","uvs","_01phi","_0m1phi","_01mphi","_0m1mphi","_1phi0","_1mphi0","_m1phi0","_m1mphi0","_phi01","_phi0m1","_mphi01","_mphi0m1","faces","setFromPoints","i","length","setAttribute","Float32Array","mats","colors","useLoader","side","map","Math","abs","sin","cos","faceMeshes","push","geometry","key","React","setPosition","setFromEvent","e","clientX","clientY","window","addEventListener","removeEventListener","Animation3D","antialias","alpha","onCreated","setPixelRatio","fallback","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.67144a4b.chunk.js","sourcesContent":["import React, { useRef, useEffect, useMemo } from 'react'\nimport { extend, useThree, useFrame } from 'react-three-fiber'\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer'\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass'\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass'\nimport { SSAOPass } from 'three/examples/jsm/postprocessing/SSAOPass'\nimport { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass'\nimport { FXAAShader } from 'three/examples/jsm/shaders/FXAAShader'\nimport { BokehPass } from 'three/examples/jsm/postprocessing/BokehPass'\n\nextend({ EffectComposer, ShaderPass, RenderPass, SSAOPass, UnrealBloomPass, BokehPass })\n\nexport default function Effects() {\n  const composer = useRef()\n  const { scene, gl, size, camera } = useThree()\n  const params = useMemo(() => ({ focus: 3.2, aperture: 0.04, maxblur: 0.015 }), [])\n  useEffect(() => void composer.current.setSize(size.width * 2, size.height * 2), [size])\n  useFrame(() => composer.current.render(), 2)\n  return (\n    <effectComposer ref={composer} args={[gl]}>\n      <renderPass attachArray=\"passes\" scene={scene} camera={camera} />\n      <shaderPass\n        attachArray=\"passes\"\n        args={[FXAAShader]}\n        material-uniforms-resolution-value={[0.25 / size.width, 0.25 / size.height]}\n        renderToScreen\n      />\n      <bokehPass attachArray=\"passes\" args={[scene, camera, params]} />\n    </effectComposer>\n  )\n}\n","import * as THREE from 'three'\nimport { Mesh } from 'three'\nimport ReactDOM from 'react-dom'\nimport React, { useMemo, useState, Suspense } from 'react'\nimport { Canvas, useFrame, useLoader } from 'react-three-fiber'\nimport { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader'\nimport Effects from './Effects'\nimport './styles.css'\n\nfunction Model(props) {\n  const [obj, set] = useState()\n  useMemo(() => new OBJLoader().load(props.url, set), [props.url])\n  const mat = new THREE.MeshBasicMaterial()\n  mat.color = new THREE.Color('#4BE9D8')\n  mat.opacity = 0.4\n  mat.transparent = true\n  mat.depthTest = false;\n  if (obj) {\n    obj.traverse((child) => {\n      if (child instanceof Mesh) {\n        child.material = mat;\n      }\n    })\n  }\n  return obj ? <primitive object={obj} position={props.position} rotation={props.rotation} /> : null\n}\n\nfunction FullModel() {\n  const [time, setTime] = useState(0)\n  const position = useMousePosition();\n\n  useFrame((state) => {\n    const time = state.clock.getElapsedTime() * 1.5\n    setTime(time)\n  })\n\n  const modelPosition = [0, 0, -1];\n  const modelRotation = [time*0.1 + position.x * 0.005, time*-0.2 + position.y * 0.005, 0];\n  const PHI = 1.618033988749895;\n  const s = 1.05 * 0.5;\n  const uvs = [\n    0,0,\n    0,1,\n    1,0\n  ];\n\n  // vertices\n  const _01phi = new THREE.Vector3(0 * s, 1 * s, PHI * s);\n  const _0m1phi = new THREE.Vector3(0 * s, -1 * s, PHI * s);\n  const _01mphi = new THREE.Vector3(0 * s, 1 * s, -PHI * s);\n  const _0m1mphi = new THREE.Vector3(0 * s, -1 * s, -PHI * s);\n\n  const _1phi0 = new THREE.Vector3(1 * s, PHI * s, 0 * s);\n  const _1mphi0 = new THREE.Vector3(1 * s, -PHI * s, 0 * s);\n  const _m1phi0 = new THREE.Vector3(-1 * s, PHI * s, 0 * s);\n  const _m1mphi0 = new THREE.Vector3(-1 * s, -PHI * s, 0 * s);\n\n  const _phi01 = new THREE.Vector3(PHI * s, 0 * s, 1 * s);\n  const _phi0m1 = new THREE.Vector3(PHI * s, 0 * s, -1 * s);\n  const _mphi01 = new THREE.Vector3(-PHI * s, 0 * s, 1 * s);\n  const _mphi0m1 = new THREE.Vector3(-PHI * s, 0 * s, -1 * s);\n\n  // create triangles from vertices\n  const faces = []\n\n  faces[0] = new THREE.BufferGeometry().setFromPoints([_0m1phi,_m1mphi0,_1mphi0]);\n  faces[1] = new THREE.BufferGeometry().setFromPoints([_0m1mphi,_1mphi0,_m1mphi0]);\n  faces[2] = new THREE.BufferGeometry().setFromPoints([_0m1mphi,_m1mphi0,_mphi0m1]);\n  faces[3] = new THREE.BufferGeometry().setFromPoints([_0m1mphi,_mphi0m1,_01mphi]);\n  faces[4] = new THREE.BufferGeometry().setFromPoints([_0m1mphi,_01mphi,_phi0m1]);\n  faces[5] = new THREE.BufferGeometry().setFromPoints([_mphi0m1,_m1phi0,_01mphi]);\n  faces[6] = new THREE.BufferGeometry().setFromPoints([_mphi0m1,_mphi01,_m1phi0]);\n  faces[7] = new THREE.BufferGeometry().setFromPoints([_mphi0m1,_m1mphi0,_mphi01]);\n  faces[8] = new THREE.BufferGeometry().setFromPoints([_0m1mphi,_phi0m1,_1mphi0]);\n  faces[9] = new THREE.BufferGeometry().setFromPoints([_phi01,_1mphi0,_phi0m1]);\n  faces[10] = new THREE.BufferGeometry().setFromPoints([_phi01,_0m1phi,_1mphi0]);\n  faces[11] = new THREE.BufferGeometry().setFromPoints([_phi01,_phi0m1,_1phi0]);\n  faces[12] = new THREE.BufferGeometry().setFromPoints([_phi0m1,_01mphi,_1phi0]);\n  faces[13] = new THREE.BufferGeometry().setFromPoints([_m1phi0,_1phi0,_01mphi]);\n  faces[14] = new THREE.BufferGeometry().setFromPoints([_m1phi0,_01phi,_1phi0]);\n  faces[15] = new THREE.BufferGeometry().setFromPoints([_phi01,_1phi0,_01phi]);\n  faces[16] = new THREE.BufferGeometry().setFromPoints([_m1phi0,_mphi01,_01phi]);\n  faces[17] = new THREE.BufferGeometry().setFromPoints([_0m1phi,_01phi,_mphi01]);\n  faces[18] = new THREE.BufferGeometry().setFromPoints([_0m1phi,_mphi01,_m1mphi0]);\n  faces[19] = new THREE.BufferGeometry().setFromPoints([_0m1phi,_phi01,_01phi]);\n\n  for(var i=0; i< faces.length; i++){\n    faces[i].setAttribute( 'uv', new THREE.BufferAttribute( new Float32Array( uvs ), 2 ) );\n  }\n\n  const mats = []\n  const colors = useLoader(THREE.TextureLoader, \"grad2.png\");\n\n  for(i=0; i< faces.length; i++){\n    mats[i] = new THREE.MeshBasicMaterial()\n    mats[i].transparent = true\n    mats[i].side = THREE.DoubleSide\n    mats[i].map = colors;\n    mats[i].opacity = Math.abs(Math.sin(i + time * 0.5) * Math.cos(i * 1.2 + time)) * 0.5;\n    mats[i].depthTest = false;\n  }\n\n  const faceMeshes = []\n  for(i = 0; i < faces.length; i++) {\n    faceMeshes.push(<mesh \n      position={modelPosition} \n      rotation={modelRotation} \n      material={mats[i]}\n      geometry={faces[i]}\n      key={i}\n    />);\n  }\n\n  return (\n    <>\n      <Model url=\"/modelv7.obj\" \n        position={modelPosition} \n        rotation={modelRotation}\n      />\n      {faceMeshes}\n    </>\n  )\n}\n\nconst useMousePosition = () => {\n  const [position, setPosition] = React.useState({ x: 0, y: 0 });\n  React.useEffect(() => {\n    const setFromEvent = (e) => setPosition({ x: e.clientX, y: e.clientY });\n    window.addEventListener(\"mousemove\", setFromEvent);\n    return () => {\n      window.removeEventListener(\"mousemove\", setFromEvent);\n    };\n  }, []);\n  return position;\n};\n\nconst Animation3D = () => {\n  const camera = new THREE.PerspectiveCamera( 35, 1, 0.1, 20 );\n  camera.position.set(0,0,3);\n  return(\n  <Canvas\n    gl={{ antialias: false, alpha: true }}\n    camera={camera}\n    onCreated={({ gl }) => {\n      gl.setPixelRatio(2)\n    }}\n  >  \n    <Suspense fallback={null}>\n      <ambientLight />\n      <FullModel />\n      <Effects />\n    </Suspense>\n  </Canvas>\n  )\n}\n\nReactDOM.render(\n  <Animation3D/>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}